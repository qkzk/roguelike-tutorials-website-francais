<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bienvenu dans le tutoriel Roguelike mis à jour : version TCOD on Tutoriel Roguelike</title>
    <link>/</link>
    <description>Recent content in Bienvenu dans le tutoriel Roguelike mis à jour : version TCOD on Tutoriel Roguelike</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Dernière mise à jour le 24 juillet 2019</copyright>
    <lastBuildDate>Sat, 30 Mar 2019 08:39:22 -0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partie 0 - Configuration</title>
      <link>/tutoriels/tcod/part-0/</link>
      <pubDate>Sat, 30 Mar 2019 09:53:48 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-0/</guid>
      <description>Connaissances préalables Ce tutoriel suppose quelques connaissances en programmation en général et avec Python. Si vous n&amp;rsquo;avez jamais utilisé Python, ce tutoriel peut vous sembler confus. Il existe de nombreuses ressources en ligne pour apprendre la programmation et Python (trop pour être citées ici) et je vous recommande de découvrir au minimum les objets et les fonctions en Python avant de commencer la lecture de ce tutoriel.
&amp;hellip; Bien sûr, nombreux sont ceux qui n&amp;rsquo;ont pas tenu compte de ce conseil et s&amp;rsquo;en sont sortis indemne aussi, ignorez ce dernier paragraphe si vous êtes audacieux !</description>
    </item>
    
    <item>
      <title>Part 13 - S&#39;équiper</title>
      <link>/tutoriels/tcod/part-13/</link>
      <pubDate>Sat, 30 Mar 2019 09:34:10 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-13/</guid>
      <description>Pour la dernière partie de notre tutoriel nous allons ajouter de l&amp;rsquo;équipement. L&amp;rsquo;équipement est un genre d&amp;rsquo;objet qui le joueur peut porter pour améliorer ses statistiques. De toute évidence cela peut-être plus complexe, selon le jeu, mais je vous laisse le soin de l&amp;rsquo;implémenter selon vos besoins. Pour ce tutoriel, équiper une arme améliore la puissance d&amp;rsquo;attaque et équiper un bouclier améliore la défense.
Vous l&amp;rsquo;avez peut-être deviné, nous avons besoin d&amp;rsquo;un nouveau composant qui nous indique quels objets sont équipables et quels effets ils procurent.</description>
    </item>
    
    <item>
      <title>Part 12 - Augmenter la difficulté</title>
      <link>/tutoriels/tcod/part-12/</link>
      <pubDate>Sat, 30 Mar 2019 09:34:08 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-12/</guid>
      <description>Notre jeu ne ressemble plus vraiment à un Roguelike : il est bien trop facile ! Qui plus est la difficulté n&amp;rsquo;augmente quand l&amp;rsquo;on progresse. Nous allons y remédier dans ce chapitre en rendant les ennemis plus fort et en répartissant les ennemis et les objets à travers les niveaux de profondeur.
Avant de s&amp;rsquo;attaquer à ça, nous allons résoudre un problème de design qui nous causera des soucis plus tard : notre fonction de choix aléatoire pour les monstres et les objets.</description>
    </item>
    
    <item>
      <title>Part 11 - Explorer les profondeurs du donjons</title>
      <link>/tutoriels/tcod/part-11/</link>
      <pubDate>Sat, 30 Mar 2019 09:34:06 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-11/</guid>
      <description>Notre jeu ne sera pas un jeu d&amp;rsquo;exploration de donjon tant qu&amp;rsquo;on n&amp;rsquo;aura qu&amp;rsquo;un niveau à parcourir. Dans ce chapitre, nous permettrons au joueur de descendre d&amp;rsquo;un niveau et nous mettrons un simple système de niveau en place afin de rendre l&amp;rsquo;exploration plus gratifiante.
Commençons par modifier GameMap pour retenir la profondeur actuelle. Cela nous aidera quand nous écrirons nos escaliers. Ouvrez game_map et réalisez les modifications suivantes :
 Diff  Original  class GameMap: - def __init__(self, width, height): + def __init__(self, width, height, dungeon_level=1):  self.</description>
    </item>
    
    <item>
      <title>Part 10 - Sauvegarder et recharger</title>
      <link>/tutoriels/tcod/part-10/</link>
      <pubDate>Sat, 30 Mar 2019 09:34:04 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-10/</guid>
      <description>Sauvegarder et recharger est une partie essentielle de la majorité des Roguelike mais cela peut-être pénible si vous l&amp;rsquo;abordez tardivement. À la fin de ce chapitre votre jeu pourra sauvegarder et charger un fichier du disque et vous pourrez facilement étendre à plusieurs fichiers si vous le souhaitez. Mais avant de s&amp;rsquo;y plonger concentrons nous sur la boucle principale du jeu.
Le fichier engine.py fait environ 250 lignes pour l&amp;rsquo;instant. Ce n&amp;rsquo;est pas si impressionnant en soit (j&amp;rsquo;ai travaillé sur des fichiers de 10,000 lignes) mais soyons honnêtes, une grande partie de ce qui y figure n&amp;rsquo;a rien à y faire.</description>
    </item>
    
    <item>
      <title>Part 9 - Lancer des sorts</title>
      <link>/tutoriels/tcod/part-9/</link>
      <pubDate>Sat, 30 Mar 2019 09:34:01 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-9/</guid>
      <description>Ajouter des potions de soin fut une grande avancée mais nous ne nous arrêterons pas là. Continuons maintenant avec quelques objets offensifs. Nous allons ajouter quelques parchemins qui donneront au joueur une attaque à distance à usage unique. Cela permet plus d&amp;rsquo;options tactiques ce qui est une direction que vous devez chercher à améliorer dans un jeu.
Commençons simplement par un sort qui frappe l&amp;rsquo;ennemi le plus proche. Nous allons créer un simple parchemin d&amp;rsquo;éclair (scoll of lightning) qui va viser automatiquement l&amp;rsquo;adversaire le plus proche.</description>
    </item>
    
    <item>
      <title>Part 8 - Les items et l&#39;inventaire</title>
      <link>/tutoriels/tcod/part-8/</link>
      <pubDate>Sat, 30 Mar 2019 09:33:55 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-8/</guid>
      <description>Pour l&amp;rsquo;instant, notre jeu implémente les mouvements, l&amp;rsquo;exploration des donjons, le combat et l&amp;rsquo;AI (okay, on abuse un peu du terme &amp;ldquo;intelligence&amp;rdquo; dans intelligence artificielle mais vous voyez ce que je veux dire). Il est temps de passer à une étape fondamentale des roguelike : les items ! Pourquoi explorer les donjons si ce n&amp;rsquo;est pour récupérer quelques butins, après tout ?
Commençons par un type d&amp;rsquo;item, les potions de soin en l&amp;rsquo;occurrence et nous passerons à l&amp;rsquo;implémentation de l&amp;rsquo;inventaire.</description>
    </item>
    
    <item>
      <title>Part 7 - Créer une interface</title>
      <link>/tutoriels/tcod/part-7/</link>
      <pubDate>Sat, 30 Mar 2019 09:33:53 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-7/</guid>
      <description>Avec chaque chapitre notre jeu est un peu plus jouable mais avant de progresser sur le gameplay, nous devrions prendre un moment pour nous concentrer sur l&amp;rsquo;aspect esthétique. Contrairement à ce que les traditionalistes du roguelike pourraient vous dire, une bonne UI est pratique.
Commençons par la section sur l&amp;rsquo;HP. Avec relativement peu de code nous pouvons ajouter une petite barre de vie qui nous dira combien il reste de santé au joueur avant de mourir.</description>
    </item>
    
    <item>
      <title>Part 6 - Faire mal (et prendre des coups)</title>
      <link>/tutoriels/tcod/part-6/</link>
      <pubDate>Sat, 30 Mar 2019 09:33:50 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-6/</guid>
      <description>La dernière partie du tutorial a préparé les combats, il est temps de les implémenter.
De manière à créer des entités &amp;ldquo;tuables&amp;rdquo;, plutôt que d&amp;rsquo;ajouter des &amp;ldquo;points de vie&amp;rdquo; à chaque entité, nous allons créer un composant, appelé Fighter qui va contenir l&amp;rsquo;information relative au combat : HP, max HP, attaque et défense. Si une entité peut combattre ce composant lui sera attaché et sinon, il n&amp;rsquo;en aura pas. Cette manière de procéder est appelé composition et c&amp;rsquo;est une alternative à la programmation par héritage habituelle.</description>
    </item>
    
    <item>
      <title>Partie 5 - Ajouter des ennemis et leur donner des coups de pied (sans faire mal)</title>
      <link>/tutoriels/tcod/part-5/</link>
      <pubDate>Sat, 30 Mar 2019 09:33:48 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-5/</guid>
      <description>Qu&amp;rsquo;est-ce qu&amp;rsquo;un donjon sans monstre à cogner ? Ce chapitre se concentrera sur la disposition des ennemis à travers le donjon et les configurer pour qu&amp;rsquo;on puisse les attaquer (les vrais combats seront abordés plus tard). Pour commencer nous aurons besoin d&amp;rsquo;une fonction pour positionner les ennemis dans le donjon. Appelons la place_entities et ajoutons la à la classe GameMap.
 Diff  Original  def create_v_tunnel(self, y1, y2, x): .</description>
    </item>
    
    <item>
      <title>Partie 4 - Champ de vision</title>
      <link>/tutoriels/tcod/part-4/</link>
      <pubDate>Sat, 30 Mar 2019 09:33:44 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-4/</guid>
      <description>Nous avons un donjon maintenant et on peut s&amp;rsquo;y déplacer librement mais est-ce vraiment de l&amp;rsquo;exploration si on peut le voir entièrement dès le départ ?
La plupart des roguelikes (pas tous !) ne vous laissent voir qu&amp;rsquo;un certain espace autour de votre personnage et le notre va respecter ce principe. Nous devons implémenter une manière de calculer le &amp;ldquo;champ de vision&amp;rdquo; (FOV) de notre aventurier et, heureusement, libtcod rend les choses aisées !</description>
    </item>
    
    <item>
      <title>Part 3 - Générer un donjon</title>
      <link>/tutoriels/tcod/part-3/</link>
      <pubDate>Sat, 30 Mar 2019 08:39:22 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-3/</guid>
      <description>Bienvenue à nouveau dans le tutoriel Roguelike revisité ! Dans cette étape nous allons franchir un pas très important vers un vrai jeu fonctionnel : créer un donjon procédural !
Vous souvenez-vous du petit mur crée pour la démonstration dans la partie précédente ? Nous n&amp;rsquo;en avons plus besoin aussi enlevons le.
 Diff  Original  - tiles[30][22].blocked = True - tiles[30][22].block_sight = True - tiles[31][22].blocked = True - tiles[31][22].</description>
    </item>
    
    <item>
      <title>Partie 2 - Une entité générique, les fonctions de rendu et la carte]</title>
      <link>/tutoriels/tcod/part-2/</link>
      <pubDate>Sat, 30 Mar 2019 08:39:20 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-2/</guid>
      <description>Maintenant que l&amp;rsquo;on peut déplacer notre petit symbole &amp;ldquo;@&amp;rdquo;, on doit lui donner un cadre. Mais avant ça pensons un instant à l&amp;rsquo;objet joueur lui même.
Pour l&amp;rsquo;instant, nous représentons simplement le joueur avec un &amp;lsquo;@&amp;rsquo; et ses coordonnées x et y. On devrait regrouper ces éléments dans un objet avec d&amp;rsquo;autres données et des fonctions qui lui correspondent.
Créons une classe générique qui représente non seulement le joueur mais aussi tous les éléments de notre monde de jeu.</description>
    </item>
    
    <item>
      <title>Partie 1 - Dessiner le caractère ‘@’ et le déplacer</title>
      <link>/tutoriels/tcod/part-1/</link>
      <pubDate>Sat, 30 Mar 2019 08:39:15 -0700</pubDate>
      
      <guid>/tutoriels/tcod/part-1/</guid>
      <description>Bienvenue dans la partie 1 du Tutoriel Roguelike revesité ! Cette série va vous aider à créer votre tout premier jeu roguelike, écrit en Python.
Ce tutoriel est largement inspiré de celui trouvé sur Roguebasin. Une grande partie des décisions de conception furent prises afin de conserver une progression commune avec celui-ci (du moins en ce concerne la composition des chapitres et la direction générale). Ce tutoriel n&amp;rsquo;aurait pu être possible sans le travail des concepteurs d&amp;rsquo;origine ainsi que celui des merveilleux contributeurs de libtcod et python-tcod.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/apropos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/apropos/</guid>
      <description>À qui s&amp;rsquo;adresse ce tutoriel ? Tous ceux qui veulent essayer !
Sérieusement, je vous recommande d&amp;rsquo;être un un peu familier avec les bases de Python et la programmation en général avant d&amp;rsquo;essayer ce tutoriel. Vous n&amp;rsquo;y trouverez pas une explication détaillée du fonctionnement des classes ni pourquoi les fonctions sont crées (cependant certaines sections présentent des particularités méconnues de Python comme les déclarations for-elses). Ce tutoriel se concentre davantage sur comment utiliser Python et la librairie TCOD pour créer un jeu roguelike et suppose quelques connaissances de base en programmation.</description>
    </item>
    
  </channel>
</rss>